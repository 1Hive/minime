{
  "address": "0xec6eF403069289cEd23Be3902087f0E959725CF7",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "_parentToken",
          "type": "address"
        },
        {
          "name": "_snapshotBlock",
          "type": "uint256"
        },
        {
          "name": "_tokenName",
          "type": "string"
        },
        {
          "name": "_decimalUnits",
          "type": "uint8"
        },
        {
          "name": "_tokenSymbol",
          "type": "string"
        },
        {
          "name": "_transfersEnabled",
          "type": "bool"
        }
      ],
      "name": "createCloneToken",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_cloneToken",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_parentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_snapshotBlock",
          "type": "uint256"
        }
      ],
      "name": "NewFactoryCloneToken",
      "type": "event"
    }
  ],
  "transactionHash": "0x7b6ef1432fb2d8ed59409b99edcfd0d7569da8e5001484820afeb3d9186b5348",
  "receipt": {
    "to": null,
    "from": "0x086D4a6964E2dF36ca3664613F96C0fB3E5F272C",
    "contractAddress": "0xec6eF403069289cEd23Be3902087f0E959725CF7",
    "transactionIndex": 11,
    "gasUsed": "2589806",
    "logsBloom": "0x
    "blockHash": "0x9604d60b32ddc79af5ca7148c6479e639687c7878c6ad59a1827a56dd17d8e7c",
    "transactionHash": "0x7b6ef1432fb2d8ed59409b99edcfd0d7569da8e5001484820afeb3d9186b5348",
    "logs": [],
    "blockNumber": 107624597,
    "cumulativeGasUsed": "3523981",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7ab5c826c00cba5a2951800ec3071c9a",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_parentToken\",\"type\":\"address\"},{\"name\":\"_snapshotBlock\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"createCloneToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_cloneToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_parentToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_snapshotBlock\",\"type\":\"uint256\"}],\"name\":\"NewFactoryCloneToken\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"createCloneToken(address,uint256,string,uint8,string,bool)\":{\"params\":{\"_decimalUnits\":\"Number of decimals of the new token\",\"_parentToken\":\"Address of the token being cloned\",\"_snapshotBlock\":\"Block of the parent token that will  determine the initial distribution of the clone token\",\"_tokenName\":\"Name of the new token\",\"_tokenSymbol\":\"Token Symbol for the new token\",\"_transfersEnabled\":\"If true, tokens will be able to be transferred\"},\"return\":\"The address of the new token contract\"}}},\"userdoc\":{\"methods\":{\"createCloneToken(address,uint256,string,uint8,string,bool)\":{\"notice\":\"Update the DApp by creating a new token with new functionalities  the msg.sender becomes the controller of this clone token\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/MiniMeToken.sol\":\"MiniMeTokenFactory\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/ITokenController.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n/// @dev The token controller contract must implement these functions\\n\\n\\ninterface ITokenController {\\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\\n    /// @param _owner The address that sent the ether to create tokens\\n    /// @return True if the ether is accepted, false if it throws\\n    function proxyPayment(address _owner) external payable returns(bool);\\n\\n    /// @notice Notifies the controller about a token transfer allowing the\\n    ///  controller to react if desired\\n    /// @param _from The origin of the transfer\\n    /// @param _to The destination of the transfer\\n    /// @param _amount The amount of the transfer\\n    /// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\\n\\n    /// @notice Notifies the controller about an approval allowing the\\n    ///  controller to react if desired\\n    /// @param _owner The address that calls `approve()`\\n    /// @param _spender The spender in the `approve()` call\\n    /// @param _amount The amount in the `approve()` call\\n    /// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);\\n}\\n\",\"keccak256\":\"0x030d1ea5543fd23d3c962cbf34b1c3b6e15d9bbfb711416e1cf4160c3bcdccaa\"},\"contracts/MiniMeToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n/*\\n    Copyright 2016, Jordi Baylina\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title MiniMeToken Contract\\n/// @author Jordi Baylina\\n/// @dev This token contract's goal is to make it easy for anyone to clone this\\n///  token using the token distribution at a given block, this will allow DAO's\\n///  and DApps to upgrade their features in a decentralized manner without\\n///  affecting the original token\\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\\n\\nimport \\\"./ITokenController.sol\\\";\\n\\ncontract Controlled {\\n    /// @notice The address of the controller is the only address that can call\\n    ///  a function with this modifier\\n    modifier onlyController {\\n        require(msg.sender == controller);\\n        _;\\n    }\\n\\n    address public controller;\\n\\n    function Controlled()  public { controller = msg.sender;}\\n\\n    /// @notice Changes the controller of the contract\\n    /// @param _newController The new controller of the contract\\n    function changeController(address _newController) onlyController  public {\\n        controller = _newController;\\n    }\\n}\\n\\ncontract ApproveAndCallFallBack {\\n    function receiveApproval(\\n        address from,\\n        uint256 _amount,\\n        address _token,\\n        bytes _data\\n    ) public;\\n}\\n\\n/// @dev The actual token contract, the default controller is the msg.sender\\n///  that deploys the contract, so usually this token will be deployed by a\\n///  token controller contract, which Giveth will call a \\\"Campaign\\\"\\ncontract MiniMeToken is Controlled {\\n\\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\\n    uint8 public decimals;             //Number of decimals of the smallest unit\\n    string public symbol;              //An identifier: e.g. REP\\n    string public version = \\\"MMT_0.1\\\"; //An arbitrary versioning scheme\\n\\n    bytes32 public nameHash;           //Name Hash to generate the domain separator  \\n\\n    mapping(address => uint256) public nonces;                              // Track the nonces used by the permit function\\n    mapping(address => mapping(bytes32 => bool)) public authorizationState; // Help to track the states of transferWithAutorization\\n\\n    // The chainId is hardcoded since solidity ^0.4.24 does not support `chainid` so we cannot get it dynamically\\n    // xDAI = 0x64 (100)\\n    uint256 public constant CHAINID = 0x64;\\n    // bytes32 public view PERMIT_TYPEHASH = \\n    //      keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    // bytes32 public view TRANSFER_WITH_AUTHORIZATION_TYPEHASH =\\n    //      keccak256(\\\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\");\\n    bytes32 public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH = 0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267;\\n    // bytes32 public view EIP712DOMAIN_HASH =\\n    //      keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant EIP712DOMAIN_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n    // bytes32 public view VERSION_HASH =\\n    //      keccak256(\\\"1\\\")\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n\\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\\n    ///  given value, the block number attached is the one that last changed the\\n    ///  value\\n    struct Checkpoint {\\n\\n        // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n\\n        // `value` is the amount of tokens at a specific block number\\n        uint128 value;\\n    }\\n\\n    // `parentToken` is the Token address that was cloned to produce this token;\\n    //  it will be 0x0 for a token that was not cloned\\n    MiniMeToken public parentToken;\\n\\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\\n    //  used to determine the initial distribution of the Clone Token\\n    uint public parentSnapShotBlock;\\n\\n    // `creationBlock` is the block number that the Clone Token was created\\n    uint public creationBlock;\\n\\n    // `balances` is the map that tracks the balance of each address, in this\\n    //  contract when the balance changes the block number that the change\\n    //  occurred is also included in the map\\n    mapping (address => Checkpoint[]) balances;\\n\\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\\n    mapping (address => mapping (address => uint256)) allowed;\\n\\n    // Tracks the history of the `totalSupply` of the token\\n    Checkpoint[] totalSupplyHistory;\\n\\n    // Flag that determines if the token is transferable or not.\\n    bool public transfersEnabled;\\n\\n    // The factory used to create new clone tokens\\n    MiniMeTokenFactory public tokenFactory;\\n\\n////////////////\\n// Constructor\\n////////////////\\n\\n    /// @notice Constructor to create a MiniMeToken\\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\\n    ///  will create the Clone token contracts, the token factory needs to be\\n    ///  deployed first\\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\\n    ///  new token\\n    /// @param _parentSnapShotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token, set to 0 if it\\n    ///  is a new token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    function MiniMeToken(\\n        MiniMeTokenFactory _tokenFactory,\\n        MiniMeToken _parentToken,\\n        uint _parentSnapShotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    )  public\\n    {\\n        tokenFactory = _tokenFactory;\\n        name = _tokenName;                                 // Set the name\\n        decimals = _decimalUnits;                          // Set the decimals\\n        symbol = _tokenSymbol;                             // Set the symbol\\n        parentToken = _parentToken;\\n        parentSnapShotBlock = _parentSnapShotBlock;\\n        transfersEnabled = _transfersEnabled;\\n        creationBlock = block.number;\\n        nameHash = keccak256(_tokenName);\\n    }\\n\\n\\n///////////////////\\n// ERC20 Methods\\n///////////////////\\n\\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n        return doTransfer(msg.sender, _to, _amount);\\n    }\\n\\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\\n    ///  is approved by `_from`\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\\n\\n        // The controller of this contract can move tokens around at will,\\n        //  this is important to recognize! Confirm that you trust the\\n        //  controller of this contract, which in most situations should be\\n        //  another open source smart contract or 0x0\\n        if (msg.sender != controller) {\\n            require(transfersEnabled);\\n\\n            // The standard ERC 20 transferFrom functionality\\n            if (allowed[_from][msg.sender] < _amount)\\n                return false;\\n            allowed[_from][msg.sender] -= _amount;\\n        }\\n        return doTransfer(_from, _to, _amount);\\n    }\\n\\n    /// @dev This is the actual transfer function in the token contract, it can\\n    ///  only be called by other functions in this contract.\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\\n        if (_amount == 0) {\\n            return true;\\n        }\\n        require(parentSnapShotBlock < block.number);\\n        // Do not allow transfer to 0x0 or the token contract itself\\n        require((_to != 0) && (_to != address(this)));\\n        // If the amount being transfered is more than the balance of the\\n        //  account the transfer returns false\\n        var previousBalanceFrom = balanceOfAt(_from, block.number);\\n        if (previousBalanceFrom < _amount) {\\n            return false;\\n        }\\n        // Alerts the token controller of the transfer\\n        if (isContract(controller)) {\\n            // Adding the ` == true` makes the linter shut up so...\\n            require(ITokenController(controller).onTransfer(_from, _to, _amount) == true);\\n        }\\n        // First update the balance array with the new value for the address\\n        //  sending the tokens\\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\\n        // Then update the balance array with the new value for the address\\n        //  receiving the tokens\\n        var previousBalanceTo = balanceOfAt(_to, block.number);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\\n        // An event to make the transfer easy to find on the blockchain\\n        Transfer(_from, _to, _amount);\\n        return true;\\n    }\\n\\n    /// @param _owner The address that's balance is being requested\\n    /// @return The balance of `_owner` at the current block\\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\\n        return balanceOfAt(_owner, block.number);\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\\n    ///  its behalf.\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the approval was successful\\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\\n        _approve(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @notice private function where `_owner` approves `_spender` to spend `_amount` tokens on\\n    ///  its behalf. This is a modified version of the ERC20 approve function\\n    ///  to be a little bit safer\\n    /// @param _owner The address of the owner of the tokens to be approved\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the approval was successful\\n    function _approve(address _owner, address _spender, uint256 _amount) private {\\n        require(transfersEnabled);\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require((_amount == 0) || (allowed[_owner][_spender] == 0));\\n\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            // Adding the ` == true` makes the linter shut up so...\\n            require(ITokenController(controller).onApprove(_owner, _spender, _amount) == true);\\n        }\\n        allowed[_owner][_spender] = _amount;\\n        Approval(_owner, _spender, _amount);\\n    }\\n\\n    /// @dev This function makes it easy to read the `allowed[]` map\\n    /// @param _owner The address of the account that owns the token\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\\n    ///  to spend\\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\\n    ///  its behalf, and then a function is triggered in the contract that is\\n    ///  being approved, `_spender`. This allows users to use their tokens to\\n    ///  interact with contracts in one function call instead of two\\n    /// @param _spender The address of the contract able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the function call was successful\\n    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\\n        require(approve(_spender, _amount));\\n\\n        _spender.receiveApproval(\\n            msg.sender,\\n            _amount,\\n            this,\\n            _extraData\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to get the total number of tokens\\n    /// @return The total number of tokens\\n    function totalSupply() public constant returns (uint) {\\n        return totalSupplyAt(block.number);\\n    }\\n\\n////////////////\\n// Permit and transferWithAuthorization\\n////////////////\\n    function permit(\\n        address _owner,\\n        address _spender,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public {\\n        require(_deadline >= block.timestamp, \\\"permit: AUTH_EXPIRED\\\");\\n\\n        bytes32 encodeData = keccak256(\\n            abi.encode(\\n                PERMIT_TYPEHASH,\\n                _owner,\\n                _spender,\\n                _value,\\n                nonces[_owner]++,\\n                _deadline\\n            )\\n        );\\n        _validateSignedData(_owner, encodeData, _v, _r, _s);\\n        _approve(_owner, _spender, _value);\\n    }\\n\\n    function getDomainSeparator() public constant returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                EIP712DOMAIN_HASH,\\n                nameHash,\\n                VERSION_HASH,\\n                CHAINID,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _validateSignedData(\\n        address _signer,\\n        bytes32 _encodeData,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) internal constant {\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), _encodeData)\\n        );\\n        address recoveredAddress = ecrecover(digest, _v, _r, _s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(\\n            recoveredAddress != 0 && recoveredAddress == _signer,\\n            \\\"_validateSignedData: INVALID_SIGNATURE\\\"\\n        );\\n    }\\n\\n    function transferWithAuthorization(\\n        address _from,\\n        address _to,\\n        uint256 _value,\\n        uint256 _validAfter,\\n        uint256 _validBefore,\\n        bytes32 _nonce,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        require(block.timestamp > _validAfter, \\\"transferWithAuthorization: AUTH_NOT_YET_VALID\\\");\\n        require(block.timestamp < _validBefore, \\\"transferWithAuthorization: AUTH_EXPIRED\\\");\\n        require(!authorizationState[_from][_nonce], \\\"transferWithAuthorization: AUTH_ALREADY_USED\\\");\\n\\n        bytes32 encodeData = keccak256(\\n            abi.encode(\\n                TRANSFER_WITH_AUTHORIZATION_TYPEHASH,\\n                _from,\\n                _to,\\n                _value,\\n                _validAfter,\\n                _validBefore,\\n                _nonce\\n            )\\n        );\\n        _validateSignedData(_from, encodeData, _v, _r, _s);\\n\\n        authorizationState[_from][_nonce] = true;\\n        require(transfersEnabled);\\n        require(doTransfer(_from, _to, _value));\\n        AuthorizationUsed(_from, _nonce);\\n    }\\n\\n\\n////////////////\\n// Query balance and totalSupply in History\\n////////////////\\n\\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @param _blockNumber The block number when the balance is queried\\n    /// @return The balance at `_blockNumber`\\n    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\\n\\n        // These next few lines are used when the balance of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.balanceOfAt` be queried at the\\n        //  genesis block for that token as this contains initial balance of\\n        //  this token\\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                // Has no parent\\n                return 0;\\n            }\\n\\n        // This will return the expected balance during normal situations\\n        } else {\\n            return getValueAt(balances[_owner], _blockNumber);\\n        }\\n    }\\n\\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\\n    /// @param _blockNumber The block number when the totalSupply is queried\\n    /// @return The total amount of tokens at `_blockNumber`\\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\\n\\n        // These next few lines are used when the totalSupply of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\\n        //  genesis block for this token as that contains totalSupply of this\\n        //  token at this block number.\\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                return 0;\\n            }\\n\\n        // This will return the expected totalSupply during normal situations\\n        } else {\\n            return getValueAt(totalSupplyHistory, _blockNumber);\\n        }\\n    }\\n\\n////////////////\\n// Clone Token Method\\n////////////////\\n\\n    /// @notice Creates a new clone token with the initial distribution being\\n    ///  this token at `_snapshotBlock`\\n    /// @param _cloneTokenName Name of the clone token\\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\\n    /// @param _cloneTokenSymbol Symbol of the clone token\\n    /// @param _snapshotBlock Block when the distribution of the parent token is\\n    ///  copied to set the initial distribution of the new clone token;\\n    ///  if the block is zero than the actual block, the current block is used\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    /// @return The address of the new MiniMeToken Contract\\n    function createCloneToken(\\n        string _cloneTokenName,\\n        uint8 _cloneDecimalUnits,\\n        string _cloneTokenSymbol,\\n        uint _snapshotBlock,\\n        bool _transfersEnabled\\n    ) public returns(MiniMeToken)\\n    {\\n        uint256 snapshot = _snapshotBlock == 0 ? block.number - 1 : _snapshotBlock;\\n\\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\\n            this,\\n            snapshot,\\n            _cloneTokenName,\\n            _cloneDecimalUnits,\\n            _cloneTokenSymbol,\\n            _transfersEnabled\\n        );\\n\\n        cloneToken.changeController(msg.sender);\\n\\n        // An event to make the token easy to find on the blockchain\\n        NewCloneToken(address(cloneToken), snapshot);\\n        return cloneToken;\\n    }\\n\\n////////////////\\n// Generate and destroy tokens\\n////////////////\\n\\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\\n    /// @param _owner The address that will be assigned the new tokens\\n    /// @param _amount The quantity of tokens generated\\n    /// @return True if the tokens are generated correctly\\n    function generateTokens(address _owner, uint _amount) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\\n        uint previousBalanceTo = balanceOf(_owner);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\\n        Transfer(0, _owner, _amount);\\n        return true;\\n    }\\n\\n\\n    /// @notice Burns `_amount` tokens from `_owner`\\n    /// @param _owner The address that will lose the tokens\\n    /// @param _amount The quantity of tokens to burn\\n    /// @return True if the tokens are burned correctly\\n    function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply >= _amount);\\n        uint previousBalanceFrom = balanceOf(_owner);\\n        require(previousBalanceFrom >= _amount);\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\\n        Transfer(_owner, 0, _amount);\\n        return true;\\n    }\\n\\n////////////////\\n// Enable tokens transfers\\n////////////////\\n\\n\\n    /// @notice Enables token holders to transfer their tokens freely if true\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    function enableTransfers(bool _transfersEnabled) onlyController public {\\n        transfersEnabled = _transfersEnabled;\\n    }\\n\\n////////////////\\n// Internal helper functions to query and set a value in a snapshot array\\n////////////////\\n\\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n    /// @param checkpoints The history of values being queried\\n    /// @param _block The block number to retrieve the value at\\n    /// @return The number of tokens being queried\\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {\\n        if (checkpoints.length == 0)\\n            return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock)\\n            return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1) / 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\\n    ///  `totalSupplyHistory`\\n    /// @param checkpoints The history of data being updated\\n    /// @param _value The new number of tokens\\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\\n        require(_value <= uint128(-1));\\n\\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\\n            newCheckPoint.fromBlock = uint128(block.number);\\n            newCheckPoint.value = uint128(_value);\\n        } else {\\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\\n            oldCheckPoint.value = uint128(_value);\\n        }\\n    }\\n\\n    /// @dev Internal function to determine if an address is a contract\\n    /// @param _addr The address being queried\\n    /// @return True if `_addr` is a contract\\n    function isContract(address _addr) constant internal returns(bool) {\\n        uint size;\\n        if (_addr == 0)\\n            return false;\\n\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n\\n        return size>0;\\n    }\\n\\n    /// @dev Helper function to return a min betwen the two uints\\n    function min(uint a, uint b) pure internal returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice The fallback function: If the contract's controller has not been\\n    ///  set to 0, then the `proxyPayment` method is called which relays the\\n    ///  ether and creates tokens as described in the token controller contract\\n    function () external payable {\\n        require(isContract(controller));\\n        // Adding the ` == true` makes the linter shut up so...\\n        require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender) == true);\\n    }\\n\\n//////////\\n// Safety Methods\\n//////////\\n\\n    /// @notice This method can be used by the controller to extract mistakenly\\n    ///  sent tokens to this contract.\\n    /// @param _token The address of the token contract that you want to recover\\n    ///  set to 0 in case you want to extract ether.\\n    function claimTokens(address _token) onlyController public {\\n        if (_token == 0x0) {\\n            controller.transfer(this.balance);\\n            return;\\n        }\\n\\n        MiniMeToken token = MiniMeToken(_token);\\n        uint balance = token.balanceOf(this);\\n        token.transfer(controller, balance);\\n        ClaimedTokens(_token, controller, balance);\\n    }\\n\\n////////////////\\n// Events\\n////////////////\\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _amount\\n        );\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n\\n}\\n\\n\\n////////////////\\n// MiniMeTokenFactory\\n////////////////\\n\\n/// @dev This contract is used to generate clone contracts from a contract.\\n///  In solidity this is the way to create a contract from a contract of the\\n///  same class\\ncontract MiniMeTokenFactory {\\n    event NewFactoryCloneToken(address indexed _cloneToken, address indexed _parentToken, uint _snapshotBlock);\\n\\n    /// @notice Update the DApp by creating a new token with new functionalities\\n    ///  the msg.sender becomes the controller of this clone token\\n    /// @param _parentToken Address of the token being cloned\\n    /// @param _snapshotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    /// @return The address of the new token contract\\n    function createCloneToken(\\n        MiniMeToken _parentToken,\\n        uint _snapshotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public returns (MiniMeToken)\\n    {\\n        MiniMeToken newToken = new MiniMeToken(\\n            this,\\n            _parentToken,\\n            _snapshotBlock,\\n            _tokenName,\\n            _decimalUnits,\\n            _tokenSymbol,\\n            _transfersEnabled\\n        );\\n\\n        newToken.changeController(msg.sender);\\n        NewFactoryCloneToken(address(newToken), address(_parentToken), _snapshotBlock);\\n        return newToken;\\n    }\\n}\\n\",\"keccak256\":\"0x988b1f92cb1f2ce2b7631734e44a5a5c0afa66e4ff0a0576418447ee9d1a33ef\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612e0d806100206000396000f3006080604052600436106100405763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416635b7b72c18114610045575b600080fd5b34801561005157600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261010694823573ffffffffffffffffffffffffffffffffffffffff1694602480359536959460649492019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b60ff8b35169b909a90999401975091955091820193509150819084018382808284375094975050505091351515925061012f915050565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60008030888888888888610141610359565b73ffffffffffffffffffffffffffffffffffffffff808916825287166020808301919091526040820187905260ff8516608083015282151560c083015260e0606083018181528751918401919091528651909160a084019161010085019189019080838360005b838110156101c05781810151838201526020016101a8565b50505050905090810190601f1680156101ed5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015610220578181015183820152602001610208565b50505050905090810190601f16801561024d5780820380516001836020036101000a031916815260200191505b509950505050505050505050604051809103906000f080158015610275573d6000803e3d6000fd5b50604080517f3cebb823000000000000000000000000000000000000000000000000000000008152336004820152905191925073ffffffffffffffffffffffffffffffffffffffff831691633cebb8239160248082019260009290919082900301818387803b1580156102e757600080fd5b505af11580156102fb573d6000803e3d6000fd5b5050604080518a8152905173ffffffffffffffffffffffffffffffffffffffff808d169450851692507fc337445265c93360601091223596471f7a4b93b349452fdf81df12fd9ceb57ca9181900360200190a3979650505050505050565b604051612a788061036a83390190560060c0604052600760808190527f4d4d545f302e310000000000000000000000000000000000000000000000000060a0908152620000409160049190620001a7565b503480156200004e57600080fd5b5060405162002a7838038062002a788339810160409081528151602080840151928401516060850151608086015160a087015160c088015160008054600160a060020a03191633179055600e8054600160a060020a0389166101000261010060a860020a031990911617905592880180519698949690959294919091019291620000de91600191870190620001a7565b506002805460ff191660ff8516179055815162000103906003906020850190620001a7565b5060088054600160a060020a031916600160a060020a0388161790556009859055600e805460ff191682151517905543600a556040518451859190819060208401908083835b602083106200016a5780518252601f19909201916020918201910162000149565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600555506200024c98505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ea57805160ff19168380011785556200021a565b828001600101855582156200021a579182015b828111156200021a578251825591602001919060010190620001fd565b50620002289291506200022c565b5090565b6200024991905b8082111562000228576000815560010162000233565b90565b61281c806200025c6000396000f3006080604052600436106101c15763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461029e578063095ea7b314610328578063176345141461036d57806318160ddd1461039457806323b872dd146103a957806330adf81f146103e0578063313ce567146103f55780633cebb823146104205780634ee2cd7e1461044e57806354fd4d501461047f5780636638c0871461049457806370a08231146105645780637ecebe001461059257806380a54001146105c0578063827f32c0146105d557806395d89b4114610606578063981b24d01461061b5780639e4e731814610633578063a0cc6a6814610648578063a9059cbb1461065d578063bef97c871461068e578063c473af33146106a3578063c5bcc4f1146106b8578063cae9ca51146106cd578063cc79f97b14610743578063d3ce77fe14610758578063d505accf14610789578063dd62ed3e146107cf578063df8de3e714610803578063e3ee160e14610831578063e77772fe1461087e578063e94a010214610893578063ed24911d146108c4578063f172a4ce146108d9578063f41e60c5146108ee578063f77c479114610908575b6000546101e39073ffffffffffffffffffffffffffffffffffffffff1661091d565b15156101ee57600080fd5b600054604080517ff48c3054000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163f48c3054913491602480830192602092919082900301818588803b15801561026157600080fd5b505af1158015610275573d6000803e3d6000fd5b50505050506040513d602081101561028c57600080fd5b5051151560011461029c57600080fd5b005b3480156102aa57600080fd5b506102b3610957565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102ed5781810151838201526020016102d5565b50505050905090810190601f16801561031a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561033457600080fd5b5061035973ffffffffffffffffffffffffffffffffffffffff600435166024356109e4565b604080519115158252519081900360200190f35b34801561037957600080fd5b506103826109fb565b60408051918252519081900360200190f35b3480156103a057600080fd5b50610382610a01565b3480156103b557600080fd5b5061035973ffffffffffffffffffffffffffffffffffffffff60043581169060243516604435610a12565b3480156103ec57600080fd5b50610382610ad0565b34801561040157600080fd5b5061040a610af4565b6040805160ff9092168252519081900360200190f35b34801561042c57600080fd5b5061029c73ffffffffffffffffffffffffffffffffffffffff60043516610afd565b34801561045a57600080fd5b5061038273ffffffffffffffffffffffffffffffffffffffff60043516602435610b68565b34801561048b57600080fd5b506102b3610d32565b3480156104a057600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261053b94369492936024939284019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b60ff8b35169b909a909994019750919550918201935091508190840183828082843750949750508435955050505050602001351515610d8d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561057057600080fd5b5061038273ffffffffffffffffffffffffffffffffffffffff6004351661101a565b34801561059e57600080fd5b5061038273ffffffffffffffffffffffffffffffffffffffff6004351661102e565b3480156105cc57600080fd5b5061053b611040565b3480156105e157600080fd5b5061035973ffffffffffffffffffffffffffffffffffffffff6004351660243561105c565b34801561061257600080fd5b506102b361114f565b34801561062757600080fd5b506103826004356111aa565b34801561063f57600080fd5b506103826112da565b34801561065457600080fd5b506103826112fe565b34801561066957600080fd5b5061035973ffffffffffffffffffffffffffffffffffffffff60043516602435611322565b34801561069a57600080fd5b50610359611341565b3480156106af57600080fd5b5061038261134a565b3480156106c457600080fd5b5061038261136e565b3480156106d957600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261035994823573ffffffffffffffffffffffffffffffffffffffff169460248035953695946064949201919081908401838280828437509497506113749650505050505050565b34801561074f57600080fd5b5061038261149c565b34801561076457600080fd5b5061035973ffffffffffffffffffffffffffffffffffffffff600435166024356114a1565b34801561079557600080fd5b5061029c73ffffffffffffffffffffffffffffffffffffffff6004358116906024351660443560643560ff6084351660a43560c435611590565b3480156107db57600080fd5b5061038273ffffffffffffffffffffffffffffffffffffffff60043581169060243516611713565b34801561080f57600080fd5b5061029c73ffffffffffffffffffffffffffffffffffffffff6004351661174b565b34801561083d57600080fd5b5061029c73ffffffffffffffffffffffffffffffffffffffff6004358116906024351660443560643560843560a43560ff60c4351660e43561010435611980565b34801561088a57600080fd5b5061053b611d2a565b34801561089f57600080fd5b5061035973ffffffffffffffffffffffffffffffffffffffff60043516602435611d4b565b3480156108d057600080fd5b50610382611d6b565b3480156108e557600080fd5b50610382611e50565b3480156108fa57600080fd5b5061029c6004351515611e56565b34801561091457600080fd5b5061053b611eab565b60008073ffffffffffffffffffffffffffffffffffffffff831615156109465760009150610951565b823b90506000811191505b50919050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109dc5780601f106109b1576101008083540402835291602001916109dc565b820191906000526020600020905b8154815290600101906020018083116109bf57829003601f168201915b505050505081565b60006109f1338484611ec7565b5060015b92915050565b600a5481565b6000610a0c436111aa565b90505b90565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610abb57600e5460ff161515610a4357600080fd5b73ffffffffffffffffffffffffffffffffffffffff84166000908152600c60209081526040808320338452909152902054821115610a8357506000610ac9565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600c602090815260408083203384529091529020805483900390555b610ac6848484612077565b90505b9392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60025460ff1681565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b2157600080fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b60205260408120541580610be7575073ffffffffffffffffffffffffffffffffffffffff83166000908152600b6020526040812080548492908110610bc757fe5b6000918252602090912001546fffffffffffffffffffffffffffffffff16115b15610cfc5760085473ffffffffffffffffffffffffffffffffffffffff1615610cf45760085460095473ffffffffffffffffffffffffffffffffffffffff90911690634ee2cd7e908590610c3c9086906122d4565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610cc157600080fd5b505af1158015610cd5573d6000803e3d6000fd5b505050506040513d6020811015610ceb57600080fd5b505190506109f5565b5060006109f5565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600b60205260409020610d2b90836122ea565b90506109f5565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109dc5780601f106109b1576101008083540402835291602001916109dc565b600080808415610d9d5784610da2565b600143035b600e546040517f5b7b72c100000000000000000000000000000000000000000000000000000000815230600482018181526024830185905260ff8c16606484015288151560a484015260c0604484019081528d5160c48501528d5195975061010090940473ffffffffffffffffffffffffffffffffffffffff1694635b7b72c194929388938f938f938f938e9391608482019160e40190602089019080838360005b83811015610e5c578181015183820152602001610e44565b50505050905090810190601f168015610e895780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015610ebc578181015183820152602001610ea4565b50505050905090810190601f168015610ee95780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b158015610f0e57600080fd5b505af1158015610f22573d6000803e3d6000fd5b505050506040513d6020811015610f3857600080fd5b5051604080517f3cebb823000000000000000000000000000000000000000000000000000000008152336004820152905191925073ffffffffffffffffffffffffffffffffffffffff831691633cebb8239160248082019260009290919082900301818387803b158015610fab57600080fd5b505af1158015610fbf573d6000803e3d6000fd5b505060408051858152905173ffffffffffffffffffffffffffffffffffffffff851693507f086c875b377f900b07ce03575813022f05dd10ed7640b5282cf6d3c3fc352ade92509081900360200190a2979650505050505050565b60006110268243610b68565b90505b919050565b60066020526000908152604090205481565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b600080548190819073ffffffffffffffffffffffffffffffffffffffff16331461108557600080fd5b61108d610a01565b915083820182111561109e57600080fd5b6110a78561101a565b90508381018111156110b857600080fd5b6110c5600d858401612476565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600b602052604090206110f690828601612476565b60408051858152905173ffffffffffffffffffffffffffffffffffffffff8716916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001949350505050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109dc5780601f106109b1576101008083540402835291602001916109dc565b600d5460009015806111e8575081600d60008154811015156111c857fe5b6000918252602090912001546fffffffffffffffffffffffffffffffff16115b156112c85760085473ffffffffffffffffffffffffffffffffffffffff16156112c05760085460095473ffffffffffffffffffffffffffffffffffffffff9091169063981b24d09061123b9085906122d4565b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561128d57600080fd5b505af11580156112a1573d6000803e3d6000fd5b505050506040513d60208110156112b757600080fd5b50519050611029565b506000611029565b6112d3600d836122ea565b9050611029565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b7f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226781565b600e5460009060ff16151561133657600080fd5b610ac9338484612077565b600e5460ff1681565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b60095481565b600061138084846109e4565b151561138b57600080fd5b6040517f8f4ffcb1000000000000000000000000000000000000000000000000000000008152336004820181815260248301869052306044840181905260806064850190815286516084860152865173ffffffffffffffffffffffffffffffffffffffff8a1695638f4ffcb195948a94938a939192909160a490910190602085019080838360005b8381101561142b578181015183820152602001611413565b50505050905090810190601f1680156114585780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561147a57600080fd5b505af115801561148e573d6000803e3d6000fd5b506001979650505050505050565b606481565b600080548190819073ffffffffffffffffffffffffffffffffffffffff1633146114ca57600080fd5b6114d2610a01565b9150838210156114e157600080fd5b6114ea8561101a565b9050838110156114f957600080fd5b611506600d858403612476565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600b6020526040902061153790858303612476565b60408051858152905160009173ffffffffffffffffffffffffffffffffffffffff8816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001949350505050565b60004285101561160157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f7065726d69743a20415554485f45585049524544000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff80891660008181526006602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938b166060840152608083018a905260a083019390935260c08083018990528151808403909101815260e09092019081905281519192909182918401908083835b602083106116c25780518252601f1990920191602091820191016116a3565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090506116fe88828686866125b1565b611709888888611ec7565b5050505050505050565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600c6020908152604080832093909416825291909152205490565b60008054819073ffffffffffffffffffffffffffffffffffffffff16331461177257600080fd5b73ffffffffffffffffffffffffffffffffffffffff831615156117dd576000805460405173ffffffffffffffffffffffffffffffffffffffff90911691303180156108fc02929091818181858888f193505050501580156117d7573d6000803e3d6000fd5b5061197b565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905184935073ffffffffffffffffffffffffffffffffffffffff8416916370a082319160248083019260209291908290030181600087803b15801561184e57600080fd5b505af1158015611862573d6000803e3d6000fd5b505050506040513d602081101561187857600080fd5b505160008054604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201526024810185905290519394509085169263a9059cbb92604480840193602093929083900390910190829087803b1580156118fb57600080fd5b505af115801561190f573d6000803e3d6000fd5b505050506040513d602081101561192557600080fd5b505060005460408051838152905173ffffffffffffffffffffffffffffffffffffffff928316928616917ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c919081900360200190a35b505050565b6000428710611a1657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f7472616e7366657257697468417574686f72697a6174696f6e3a20415554485f60448201527f4e4f545f5945545f56414c494400000000000000000000000000000000000000606482015290519081900360840190fd5b428611611aaa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f7472616e7366657257697468417574686f72697a6174696f6e3a20415554485f60448201527f4558504952454400000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b73ffffffffffffffffffffffffffffffffffffffff8a16600090815260076020908152604080832088845290915290205460ff1615611b7057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f7472616e7366657257697468417574686f72697a6174696f6e3a20415554485f60448201527f414c52454144595f555345440000000000000000000000000000000000000000606482015290519081900360840190fd5b604080517f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226760208083019190915273ffffffffffffffffffffffffffffffffffffffff808e16838501528c166060830152608082018b905260a082018a905260c0820189905260e08083018990528351808403909101815261010090920192839052815191929182918401908083835b60208310611c1f5780518252601f199092019160209182019101611c00565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050611c5b8a828686866125b1565b73ffffffffffffffffffffffffffffffffffffffff8a166000908152600760209081526040808320888452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055600e5460ff161515611cc557600080fd5b611cd08a8a8a612077565b1515611cdb57600080fd5b604051859073ffffffffffffffffffffffffffffffffffffffff8c16907f98de503528ee59b575ef0c0a2576a82497bfc029a5685b209e9ec333479b10a590600090a350505050505050505050565b600e54610100900473ffffffffffffffffffffffffffffffffffffffff1681565b600760209081526000928352604080842090915290825290205460ff1681565b600554604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f602080830191909152818301939093527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152606460808201523060a0808301919091528251808303909101815260c09091019182905280516000939192918291908401908083835b60208310611e1e5780518252601f199092019160209182019101611dff565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905090565b60055481565b60005473ffffffffffffffffffffffffffffffffffffffff163314611e7a57600080fd5b600e80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600e5460ff161515611ed857600080fd5b801580611f15575073ffffffffffffffffffffffffffffffffffffffff8084166000908152600c6020908152604080832093861683529290522054155b1515611f2057600080fd5b600054611f429073ffffffffffffffffffffffffffffffffffffffff1661091d565b156120085760008054604080517fda682aeb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152604482018690529151919092169263da682aeb92606480820193602093909283900390910190829087803b158015611fce57600080fd5b505af1158015611fe2573d6000803e3d6000fd5b505050506040513d6020811015611ff857600080fd5b5051151560011461200857600080fd5b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600c6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000808083151561208b57600192506122cb565b600954431161209957600080fd5b73ffffffffffffffffffffffffffffffffffffffff8516158015906120d4575073ffffffffffffffffffffffffffffffffffffffff85163014155b15156120df57600080fd5b6120e98643610b68565b9150838210156120fc57600092506122cb565b60005461211e9073ffffffffffffffffffffffffffffffffffffffff1661091d565b156121e45760008054604080517f4a39314900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015289811660248301526044820189905291519190921692634a39314992606480820193602093909283900390910190829087803b1580156121aa57600080fd5b505af11580156121be573d6000803e3d6000fd5b505050506040513d60208110156121d457600080fd5b505115156001146121e457600080fd5b73ffffffffffffffffffffffffffffffffffffffff86166000908152600b6020526040902061221590858403612476565b61221f8543610b68565b905083810181111561223057600080fd5b73ffffffffffffffffffffffffffffffffffffffff85166000908152600b6020526040902061226190828601612476565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600192505b50509392505050565b60008183106122e35781610ac9565b5090919050565b600080600080858054905060001415612306576000935061246d565b85548690600019810190811061231857fe5b6000918252602090912001546fffffffffffffffffffffffffffffffff1685106123875785548690600019810190811061234e57fe5b60009182526020909120015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16935061246d565b85600081548110151561239657fe5b6000918252602090912001546fffffffffffffffffffffffffffffffff168510156123c4576000935061246d565b8554600093506000190191505b8282111561242a5760026001838501010490508486828154811015156123f357fe5b6000918252602090912001546fffffffffffffffffffffffffffffffff161161241e57809250612425565b6001810391505b6123d1565b858381548110151561243857fe5b60009182526020909120015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1693505b50505092915050565b6000806fffffffffffffffffffffffffffffffff83111561249657600080fd5b835415806124d3575083544390859060001981019081106124b357fe5b6000918252602090912001546fffffffffffffffffffffffffffffffff16105b1561255d57835484906124e982600183016127b3565b815481106124f357fe5b600091825260209091200180546fffffffffffffffffffffffffffffffff858116700100000000000000000000000000000000024382167fffffffffffffffffffffffffffffffff00000000000000000000000000000000909316929092171617815591506125ab565b83548490600019810190811061256f57fe5b600091825260209091200180546fffffffffffffffffffffffffffffffff80861670010000000000000000000000000000000002911617815590505b50505050565b6000806125bc611d6b565b604080517f1901000000000000000000000000000000000000000000000000000000000000602080830191909152602282019390935260428082018a905282518083039091018152606290910191829052805190928291908401908083835b6020831061263a5780518252601f19909201916020918201910161261b565b51815160209384036101000a600019018019909216911617905260408051929094018290038220600080845283830180875282905260ff8d1684870152606084018c9052608084018b905294519098506001965060a080840196509194601f19820194509281900390910191865af11580156126ba573d6000803e3d6000fd5b5050604051601f19015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061271757508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15156127aa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f5f76616c69646174655369676e6564446174613a20494e56414c49445f53494760448201527f4e41545552450000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b50505050505050565b81548183558181111561197b5760008381526020902061197b918101908301610a0f91905b808211156127ec57600081556001016127d8565b50905600a165627a7a72305820e1d431ad8451bda287a431d0971390c73961dc05c5417ae6720b0e5f85abb1a00029a165627a7a72305820f427e7623d9a1f88c5781184b67f735cb0531873f29432c1c748f313d4600c900029",
  "deployedBytecode": "0x6080604052600436106100405763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416635b7b72c18114610045575b600080fd5b34801561005157600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261010694823573ffffffffffffffffffffffffffffffffffffffff1694602480359536959460649492019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b60ff8b35169b909a90999401975091955091820193509150819084018382808284375094975050505091351515925061012f915050565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60008030888888888888610141610359565b73ffffffffffffffffffffffffffffffffffffffff808916825287166020808301919091526040820187905260ff8516608083015282151560c083015260e0606083018181528751918401919091528651909160a084019161010085019189019080838360005b838110156101c05781810151838201526020016101a8565b50505050905090810190601f1680156101ed5780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015610220578181015183820152602001610208565b50505050905090810190601f16801561024d5780820380516001836020036101000a031916815260200191505b509950505050505050505050604051809103906000f080158015610275573d6000803e3d6000fd5b50604080517f3cebb823000000000000000000000000000000000000000000000000000000008152336004820152905191925073ffffffffffffffffffffffffffffffffffffffff831691633cebb8239160248082019260009290919082900301818387803b1580156102e757600080fd5b505af11580156102fb573d6000803e3d6000fd5b5050604080518a8152905173ffffffffffffffffffffffffffffffffffffffff808d169450851692507fc337445265c93360601091223596471f7a4b93b349452fdf81df12fd9ceb57ca9181900360200190a3979650505050505050565b604051612a788061036a83390190560060c0604052600760808190527f4d4d545f302e310000000000000000000000000000000000000000000000000060a0908152620000409160049190620001a7565b503480156200004e57600080fd5b5060405162002a7838038062002a788339810160409081528151602080840151928401516060850151608086015160a087015160c088015160008054600160a060020a03191633179055600e8054600160a060020a0389166101000261010060a860020a031990911617905592880180519698949690959294919091019291620000de91600191870190620001a7565b506002805460ff191660ff8516179055815162000103906003906020850190620001a7565b5060088054600160a060020a031916600160a060020a0388161790556009859055600e805460ff191682151517905543600a556040518451859190819060208401908083835b602083106200016a5780518252601f19909201916020918201910162000149565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600555506200024c98505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ea57805160ff19168380011785556200021a565b828001600101855582156200021a579182015b828111156200021a578251825591602001919060010190620001fd565b50620002289291506200022c565b5090565b6200024991905b8082111562000228576000815560010162000233565b90565b61281c806200025c6000396000f3006080604052600436106101c15763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461029e578063095ea7b314610328578063176345141461036d57806318160ddd1461039457806323b872dd146103a957806330adf81f146103e0578063313ce567146103f55780633cebb823146104205780634ee2cd7e1461044e57806354fd4d501461047f5780636638c0871461049457806370a08231146105645780637ecebe001461059257806380a54001146105c0578063827f32c0146105d557806395d89b4114610606578063981b24d01461061b5780639e4e731814610633578063a0cc6a6814610648578063a9059cbb1461065d578063bef97c871461068e578063c473af33146106a3578063c5bcc4f1146106b8578063cae9ca51146106cd578063cc79f97b14610743578063d3ce77fe14610758578063d505accf14610789578063dd62ed3e146107cf578063df8de3e714610803578063e3ee160e14610831578063e77772fe1461087e578063e94a010214610893578063ed24911d146108c4578063f172a4ce146108d9578063f41e60c5146108ee578063f77c479114610908575b6000546101e39073ffffffffffffffffffffffffffffffffffffffff1661091d565b15156101ee57600080fd5b600054604080517ff48c3054000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163f48c3054913491602480830192602092919082900301818588803b15801561026157600080fd5b505af1158015610275573d6000803e3d6000fd5b50505050506040513d602081101561028c57600080fd5b5051151560011461029c57600080fd5b005b3480156102aa57600080fd5b506102b3610957565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102ed5781810151838201526020016102d5565b50505050905090810190601f16801561031a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561033457600080fd5b5061035973ffffffffffffffffffffffffffffffffffffffff600435166024356109e4565b604080519115158252519081900360200190f35b34801561037957600080fd5b506103826109fb565b60408051918252519081900360200190f35b3480156103a057600080fd5b50610382610a01565b3480156103b557600080fd5b5061035973ffffffffffffffffffffffffffffffffffffffff60043581169060243516604435610a12565b3480156103ec57600080fd5b50610382610ad0565b34801561040157600080fd5b5061040a610af4565b6040805160ff9092168252519081900360200190f35b34801561042c57600080fd5b5061029c73ffffffffffffffffffffffffffffffffffffffff60043516610afd565b34801561045a57600080fd5b5061038273ffffffffffffffffffffffffffffffffffffffff60043516602435610b68565b34801561048b57600080fd5b506102b3610d32565b3480156104a057600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261053b94369492936024939284019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b60ff8b35169b909a909994019750919550918201935091508190840183828082843750949750508435955050505050602001351515610d8d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561057057600080fd5b5061038273ffffffffffffffffffffffffffffffffffffffff6004351661101a565b34801561059e57600080fd5b5061038273ffffffffffffffffffffffffffffffffffffffff6004351661102e565b3480156105cc57600080fd5b5061053b611040565b3480156105e157600080fd5b5061035973ffffffffffffffffffffffffffffffffffffffff6004351660243561105c565b34801561061257600080fd5b506102b361114f565b34801561062757600080fd5b506103826004356111aa565b34801561063f57600080fd5b506103826112da565b34801561065457600080fd5b506103826112fe565b34801561066957600080fd5b5061035973ffffffffffffffffffffffffffffffffffffffff60043516602435611322565b34801561069a57600080fd5b50610359611341565b3480156106af57600080fd5b5061038261134a565b3480156106c457600080fd5b5061038261136e565b3480156106d957600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261035994823573ffffffffffffffffffffffffffffffffffffffff169460248035953695946064949201919081908401838280828437509497506113749650505050505050565b34801561074f57600080fd5b5061038261149c565b34801561076457600080fd5b5061035973ffffffffffffffffffffffffffffffffffffffff600435166024356114a1565b34801561079557600080fd5b5061029c73ffffffffffffffffffffffffffffffffffffffff6004358116906024351660443560643560ff6084351660a43560c435611590565b3480156107db57600080fd5b5061038273ffffffffffffffffffffffffffffffffffffffff60043581169060243516611713565b34801561080f57600080fd5b5061029c73ffffffffffffffffffffffffffffffffffffffff6004351661174b565b34801561083d57600080fd5b5061029c73ffffffffffffffffffffffffffffffffffffffff6004358116906024351660443560643560843560a43560ff60c4351660e43561010435611980565b34801561088a57600080fd5b5061053b611d2a565b34801561089f57600080fd5b5061035973ffffffffffffffffffffffffffffffffffffffff60043516602435611d4b565b3480156108d057600080fd5b50610382611d6b565b3480156108e557600080fd5b50610382611e50565b3480156108fa57600080fd5b5061029c6004351515611e56565b34801561091457600080fd5b5061053b611eab565b60008073ffffffffffffffffffffffffffffffffffffffff831615156109465760009150610951565b823b90506000811191505b50919050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109dc5780601f106109b1576101008083540402835291602001916109dc565b820191906000526020600020905b8154815290600101906020018083116109bf57829003601f168201915b505050505081565b60006109f1338484611ec7565b5060015b92915050565b600a5481565b6000610a0c436111aa565b90505b90565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610abb57600e5460ff161515610a4357600080fd5b73ffffffffffffffffffffffffffffffffffffffff84166000908152600c60209081526040808320338452909152902054821115610a8357506000610ac9565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600c602090815260408083203384529091529020805483900390555b610ac6848484612077565b90505b9392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60025460ff1681565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b2157600080fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b60205260408120541580610be7575073ffffffffffffffffffffffffffffffffffffffff83166000908152600b6020526040812080548492908110610bc757fe5b6000918252602090912001546fffffffffffffffffffffffffffffffff16115b15610cfc5760085473ffffffffffffffffffffffffffffffffffffffff1615610cf45760085460095473ffffffffffffffffffffffffffffffffffffffff90911690634ee2cd7e908590610c3c9086906122d4565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610cc157600080fd5b505af1158015610cd5573d6000803e3d6000fd5b505050506040513d6020811015610ceb57600080fd5b505190506109f5565b5060006109f5565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600b60205260409020610d2b90836122ea565b90506109f5565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109dc5780601f106109b1576101008083540402835291602001916109dc565b600080808415610d9d5784610da2565b600143035b600e546040517f5b7b72c100000000000000000000000000000000000000000000000000000000815230600482018181526024830185905260ff8c16606484015288151560a484015260c0604484019081528d5160c48501528d5195975061010090940473ffffffffffffffffffffffffffffffffffffffff1694635b7b72c194929388938f938f938f938e9391608482019160e40190602089019080838360005b83811015610e5c578181015183820152602001610e44565b50505050905090810190601f168015610e895780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015610ebc578181015183820152602001610ea4565b50505050905090810190601f168015610ee95780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b158015610f0e57600080fd5b505af1158015610f22573d6000803e3d6000fd5b505050506040513d6020811015610f3857600080fd5b5051604080517f3cebb823000000000000000000000000000000000000000000000000000000008152336004820152905191925073ffffffffffffffffffffffffffffffffffffffff831691633cebb8239160248082019260009290919082900301818387803b158015610fab57600080fd5b505af1158015610fbf573d6000803e3d6000fd5b505060408051858152905173ffffffffffffffffffffffffffffffffffffffff851693507f086c875b377f900b07ce03575813022f05dd10ed7640b5282cf6d3c3fc352ade92509081900360200190a2979650505050505050565b60006110268243610b68565b90505b919050565b60066020526000908152604090205481565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b600080548190819073ffffffffffffffffffffffffffffffffffffffff16331461108557600080fd5b61108d610a01565b915083820182111561109e57600080fd5b6110a78561101a565b90508381018111156110b857600080fd5b6110c5600d858401612476565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600b602052604090206110f690828601612476565b60408051858152905173ffffffffffffffffffffffffffffffffffffffff8716916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001949350505050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109dc5780601f106109b1576101008083540402835291602001916109dc565b600d5460009015806111e8575081600d60008154811015156111c857fe5b6000918252602090912001546fffffffffffffffffffffffffffffffff16115b156112c85760085473ffffffffffffffffffffffffffffffffffffffff16156112c05760085460095473ffffffffffffffffffffffffffffffffffffffff9091169063981b24d09061123b9085906122d4565b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561128d57600080fd5b505af11580156112a1573d6000803e3d6000fd5b505050506040513d60208110156112b757600080fd5b50519050611029565b506000611029565b6112d3600d836122ea565b9050611029565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b7f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226781565b600e5460009060ff16151561133657600080fd5b610ac9338484612077565b600e5460ff1681565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b60095481565b600061138084846109e4565b151561138b57600080fd5b6040517f8f4ffcb1000000000000000000000000000000000000000000000000000000008152336004820181815260248301869052306044840181905260806064850190815286516084860152865173ffffffffffffffffffffffffffffffffffffffff8a1695638f4ffcb195948a94938a939192909160a490910190602085019080838360005b8381101561142b578181015183820152602001611413565b50505050905090810190601f1680156114585780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561147a57600080fd5b505af115801561148e573d6000803e3d6000fd5b506001979650505050505050565b606481565b600080548190819073ffffffffffffffffffffffffffffffffffffffff1633146114ca57600080fd5b6114d2610a01565b9150838210156114e157600080fd5b6114ea8561101a565b9050838110156114f957600080fd5b611506600d858403612476565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600b6020526040902061153790858303612476565b60408051858152905160009173ffffffffffffffffffffffffffffffffffffffff8816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001949350505050565b60004285101561160157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f7065726d69743a20415554485f45585049524544000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff80891660008181526006602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938b166060840152608083018a905260a083019390935260c08083018990528151808403909101815260e09092019081905281519192909182918401908083835b602083106116c25780518252601f1990920191602091820191016116a3565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090506116fe88828686866125b1565b611709888888611ec7565b5050505050505050565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600c6020908152604080832093909416825291909152205490565b60008054819073ffffffffffffffffffffffffffffffffffffffff16331461177257600080fd5b73ffffffffffffffffffffffffffffffffffffffff831615156117dd576000805460405173ffffffffffffffffffffffffffffffffffffffff90911691303180156108fc02929091818181858888f193505050501580156117d7573d6000803e3d6000fd5b5061197b565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905184935073ffffffffffffffffffffffffffffffffffffffff8416916370a082319160248083019260209291908290030181600087803b15801561184e57600080fd5b505af1158015611862573d6000803e3d6000fd5b505050506040513d602081101561187857600080fd5b505160008054604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201526024810185905290519394509085169263a9059cbb92604480840193602093929083900390910190829087803b1580156118fb57600080fd5b505af115801561190f573d6000803e3d6000fd5b505050506040513d602081101561192557600080fd5b505060005460408051838152905173ffffffffffffffffffffffffffffffffffffffff928316928616917ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c919081900360200190a35b505050565b6000428710611a1657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f7472616e7366657257697468417574686f72697a6174696f6e3a20415554485f60448201527f4e4f545f5945545f56414c494400000000000000000000000000000000000000606482015290519081900360840190fd5b428611611aaa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f7472616e7366657257697468417574686f72697a6174696f6e3a20415554485f60448201527f4558504952454400000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b73ffffffffffffffffffffffffffffffffffffffff8a16600090815260076020908152604080832088845290915290205460ff1615611b7057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f7472616e7366657257697468417574686f72697a6174696f6e3a20415554485f60448201527f414c52454144595f555345440000000000000000000000000000000000000000606482015290519081900360840190fd5b604080517f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226760208083019190915273ffffffffffffffffffffffffffffffffffffffff808e16838501528c166060830152608082018b905260a082018a905260c0820189905260e08083018990528351808403909101815261010090920192839052815191929182918401908083835b60208310611c1f5780518252601f199092019160209182019101611c00565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050611c5b8a828686866125b1565b73ffffffffffffffffffffffffffffffffffffffff8a166000908152600760209081526040808320888452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055600e5460ff161515611cc557600080fd5b611cd08a8a8a612077565b1515611cdb57600080fd5b604051859073ffffffffffffffffffffffffffffffffffffffff8c16907f98de503528ee59b575ef0c0a2576a82497bfc029a5685b209e9ec333479b10a590600090a350505050505050505050565b600e54610100900473ffffffffffffffffffffffffffffffffffffffff1681565b600760209081526000928352604080842090915290825290205460ff1681565b600554604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f602080830191909152818301939093527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152606460808201523060a0808301919091528251808303909101815260c09091019182905280516000939192918291908401908083835b60208310611e1e5780518252601f199092019160209182019101611dff565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905090565b60055481565b60005473ffffffffffffffffffffffffffffffffffffffff163314611e7a57600080fd5b600e80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600e5460ff161515611ed857600080fd5b801580611f15575073ffffffffffffffffffffffffffffffffffffffff8084166000908152600c6020908152604080832093861683529290522054155b1515611f2057600080fd5b600054611f429073ffffffffffffffffffffffffffffffffffffffff1661091d565b156120085760008054604080517fda682aeb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152604482018690529151919092169263da682aeb92606480820193602093909283900390910190829087803b158015611fce57600080fd5b505af1158015611fe2573d6000803e3d6000fd5b505050506040513d6020811015611ff857600080fd5b5051151560011461200857600080fd5b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600c6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000808083151561208b57600192506122cb565b600954431161209957600080fd5b73ffffffffffffffffffffffffffffffffffffffff8516158015906120d4575073ffffffffffffffffffffffffffffffffffffffff85163014155b15156120df57600080fd5b6120e98643610b68565b9150838210156120fc57600092506122cb565b60005461211e9073ffffffffffffffffffffffffffffffffffffffff1661091d565b156121e45760008054604080517f4a39314900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015289811660248301526044820189905291519190921692634a39314992606480820193602093909283900390910190829087803b1580156121aa57600080fd5b505af11580156121be573d6000803e3d6000fd5b505050506040513d60208110156121d457600080fd5b505115156001146121e457600080fd5b73ffffffffffffffffffffffffffffffffffffffff86166000908152600b6020526040902061221590858403612476565b61221f8543610b68565b905083810181111561223057600080fd5b73ffffffffffffffffffffffffffffffffffffffff85166000908152600b6020526040902061226190828601612476565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600192505b50509392505050565b60008183106122e35781610ac9565b5090919050565b600080600080858054905060001415612306576000935061246d565b85548690600019810190811061231857fe5b6000918252602090912001546fffffffffffffffffffffffffffffffff1685106123875785548690600019810190811061234e57fe5b60009182526020909120015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16935061246d565b85600081548110151561239657fe5b6000918252602090912001546fffffffffffffffffffffffffffffffff168510156123c4576000935061246d565b8554600093506000190191505b8282111561242a5760026001838501010490508486828154811015156123f357fe5b6000918252602090912001546fffffffffffffffffffffffffffffffff161161241e57809250612425565b6001810391505b6123d1565b858381548110151561243857fe5b60009182526020909120015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1693505b50505092915050565b6000806fffffffffffffffffffffffffffffffff83111561249657600080fd5b835415806124d3575083544390859060001981019081106124b357fe5b6000918252602090912001546fffffffffffffffffffffffffffffffff16105b1561255d57835484906124e982600183016127b3565b815481106124f357fe5b600091825260209091200180546fffffffffffffffffffffffffffffffff858116700100000000000000000000000000000000024382167fffffffffffffffffffffffffffffffff00000000000000000000000000000000909316929092171617815591506125ab565b83548490600019810190811061256f57fe5b600091825260209091200180546fffffffffffffffffffffffffffffffff80861670010000000000000000000000000000000002911617815590505b50505050565b6000806125bc611d6b565b604080517f1901000000000000000000000000000000000000000000000000000000000000602080830191909152602282019390935260428082018a905282518083039091018152606290910191829052805190928291908401908083835b6020831061263a5780518252601f19909201916020918201910161261b565b51815160209384036101000a600019018019909216911617905260408051929094018290038220600080845283830180875282905260ff8d1684870152606084018c9052608084018b905294519098506001965060a080840196509194601f19820194509281900390910191865af11580156126ba573d6000803e3d6000fd5b5050604051601f19015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061271757508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15156127aa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f5f76616c69646174655369676e6564446174613a20494e56414c49445f53494760448201527f4e41545552450000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b50505050505050565b81548183558181111561197b5760008381526020902061197b918101908301610a0f91905b808211156127ec57600081556001016127d8565b50905600a165627a7a72305820e1d431ad8451bda287a431d0971390c73961dc05c5417ae6720b0e5f85abb1a00029a165627a7a72305820f427e7623d9a1f88c5781184b67f735cb0531873f29432c1c748f313d4600c900029",
  "devdoc": {
    "methods": {
      "createCloneToken(address,uint256,string,uint8,string,bool)": {
        "params": {
          "_decimalUnits": "Number of decimals of the new token",
          "_parentToken": "Address of the token being cloned",
          "_snapshotBlock": "Block of the parent token that will  determine the initial distribution of the clone token",
          "_tokenName": "Name of the new token",
          "_tokenSymbol": "Token Symbol for the new token",
          "_transfersEnabled": "If true, tokens will be able to be transferred"
        },
        "return": "The address of the new token contract"
      }
    }
  },
  "userdoc": {
    "methods": {
      "createCloneToken(address,uint256,string,uint8,string,bool)": {
        "notice": "Update the DApp by creating a new token with new functionalities  the msg.sender becomes the controller of this clone token"
      }
    }
  }
}